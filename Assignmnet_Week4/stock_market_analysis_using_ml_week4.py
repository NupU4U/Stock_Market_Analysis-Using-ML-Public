# -*- coding: utf-8 -*-
"""Stock_Market_Analysis_Using_ML_week4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ot9FrQR3YzXk7Dod0o_wVcgXiOfT9Swg
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import date
import numpy as np
import scipy.stats as stats
import numpy as np

from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeRegressor
from sklearn.linear_model import LinearRegression
import sklearn.metrics as metrics
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline, make_pipeline
from sklearn.model_selection import cross_val_score
from sklearn.preprocessing import FunctionTransformer
from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import PowerTransformer

from google.colab import drive
drive.mount('/content/drive')

x_train = pd.read_csv("/content/drive/MyDrive/Google_train_data.csv")
x_train.sample(5)

x_test = pd.read_csv("/content/drive/MyDrive/Google_test_data.csv")
x_test.sample(5)

x_test.drop(columns = ["Adj Close"], inplace = True)

x_train["Date"] = pd.to_datetime(x_train["Date"])
empty = []
for i in x_train["Date"]:
  empty.append(i.date())

x_train["Date"] = empty
x_train["Date"]

x_test["Date"] = pd.to_datetime(x_test["Date"])
empty = []
for i in x_test["Date"]:
  empty.append(i.date())

x_test["Date"] = empty
x_test["Date"]

year_list = []
month_list = []
day_list = []
for i in x_train["Date"]:
  year_list.append(i.year)
  month_list.append(i.month)
  day_list.append(i.day)

x_train["year"] = year_list
x_train["month"] = month_list
x_train["day"] = day_list
x_train = x_train.sort_values(by = ["year","month","day"], ascending = True).drop(["month","day"],axis = 1)
x_train.reset_index(drop = True, inplace = True)
x_train.head()

year_list = []
month_list = []
day_list = []
for i in x_test["Date"]:
  year_list.append(i.year)
  month_list.append(i.month)
  day_list.append(i.day)

x_test["year"] = year_list
x_test["month"] = month_list
x_test["day"] = day_list
x_test = x_test.sort_values(by = ["year","month","day"], ascending = True).drop(["month","day"],axis = 1)
x_test.reset_index(drop = True, inplace = True)
x_test.head()

x_train.drop(columns = ["Date"], axis = 1, inplace =  True)
x_train.sample(2)

x_test.drop(columns = ["Date"], axis = 1, inplace =  True)
x_test.sample(2)

"""**Applying the model without transforming the columns**"""

y_train = x_train.iloc[:,3:4]

y_train.head()

y_test = x_test.iloc[:,3:4]

y_test.head()

x_train.drop(columns = ["Close"], inplace = True)

x_test.drop(columns = ["Close"], inplace = True)

x_test.info()

y_test.info()

y_train.info()

x_train.info()

Volume = []
for vol in x_train["Volume"]:
  Volume.append("".join(vol.split(",")))

x_train["Volume"] = Volume

x_train["Volume"] = x_train["Volume"].astype(int)

Close = []
for col in y_train["Close"]:
  Close.append("".join(col.split(",")))

y_train["Close"] = Close

y_train

y_train["Close"] =  y_train["Close"].astype(float)

em = []
for col in y_train['Close']:
  em.append(round(col,2))

y_train["Close"] = em

em = []
for col in y_test['Close']:
  em.append(round(col,2))

y_test["Close"] = em

y_test

pt = PowerTransformer()
x_train2 = pt.fit_transform(x_train)

x_test2 = pt.transform(x_test)

x_test2

x_train2

x_train2 = pd.DataFrame(x_train2, columns = x_train.columns)

for col in x_train.columns:
  plt.figure(figsize = (14,4))
  plt.subplot(121)
  sns.distplot(x_train[col]) 

  plt.subplot(122)
  sns.distplot(x_train2[col])
  plt.title(col)

  plt.show()

x_test2 = pd.DataFrame(x_test2, columns = x_test.columns)

for col in x_test.columns:
  plt.figure(figsize = (14,4))
  plt.subplot(121)
  sns.distplot(x_test[col]) 

  plt.subplot(122)
  sns.distplot(x_test2[col])
  plt.title(col)

  plt.show()

clf1 = LinearRegression()
clf2 = DecisionTreeRegressor()

clf1.fit(x_train2, y_train)
clf2.fit(x_train2, y_train)

y_predict1 = clf1.predict(x_test2)
y_predict2 = clf2.predict(x_test2)

predict1 = pd.DataFrame(y_predict1)
predict1.columns = ["Close"]

predict2 = pd.DataFrame(y_predict2)
predict2.columns = ["Close"]

em = []
for col in predict1['Close']:
  em.append(round(col,2))

predict1["Close"] = em

em = []
for col in predict2['Close']:
  em.append(round(col,2))

predict1["Close"] = em

metrics.mean_squared_error(y_test,y_predict1)

print("Accuracy LR:", clf1.score(x_test2, y_test))
print("Accuracy DTR:", clf2.score(x_test2, y_test))

print(metrics.r2_score(y_test,y_predict1))
print(metrics.r2_score(y_test,y_predict2))

"""**Method2**
**Making Pipelines**
"""

Transformer1 = ColumnTransformer([
                                  ("scale", StandardScaler(),[0,1,2,3,4])
])

Transformer2 = LinearRegression()

pipe = Pipeline([
                 ("Transformer1", Transformer1),
                 ("Transformer2", Transformer2),
])

#Diplay Pipeline
from sklearn import set_config
set_config(display = "diagram")

pipe.fit(x_train,y_train)

y_predict3 = pipe.predict(x_test)

cross_val_score(pipe, x_train, y_train, cv = 5, scoring = "r2").mean()

predict3 = pd.DataFrame(y_predict3)
predict3.columns = ["Close"]

em = []
for col in predict3['Close']:
  em.append(round(col,2))

predict3["Close"] = em

predict3

metrics.mean_squared_error(y_test,predict3)